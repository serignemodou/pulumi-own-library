"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationStrengthPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Authentication Strength Policy within Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`
 *
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.AuthenticationStrengthPolicy("example", {
 *     displayName: "Example Authentication Strength Policy",
 *     description: "Policy for demo purposes",
 *     allowedCombinations: [
 *         "fido2",
 *         "password",
 *     ],
 * });
 * const example2 = new azuread.AuthenticationStrengthPolicy("example2", {
 *     displayName: "Example Authentication Strength Policy",
 *     description: "Policy for demo purposes with all possible combinations",
 *     allowedCombinations: [
 *         "fido2",
 *         "password",
 *         "deviceBasedPush",
 *         "temporaryAccessPassOneTime",
 *         "federatedMultiFactor",
 *         "federatedSingleFactor",
 *         "hardwareOath,federatedSingleFactor",
 *         "microsoftAuthenticatorPush,federatedSingleFactor",
 *         "password,hardwareOath",
 *         "password,microsoftAuthenticatorPush",
 *         "password,sms",
 *         "password,softwareOath",
 *         "password,voice",
 *         "sms",
 *         "sms,federatedSingleFactor",
 *         "softwareOath,federatedSingleFactor",
 *         "temporaryAccessPassMultiUse",
 *         "voice,federatedSingleFactor",
 *         "windowsHelloForBusiness",
 *         "x509CertificateMultiFactor",
 *         "x509CertificateSingleFactor",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Authentication Strength Policies can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy my_policy /policies/authenticationStrengthPolicies/00000000-0000-0000-0000-000000000000
 * ```
 */
class AuthenticationStrengthPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationStrengthPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AuthenticationStrengthPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AuthenticationStrengthPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationStrengthPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowedCombinations"] = state ? state.allowedCombinations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.allowedCombinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedCombinations'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["allowedCombinations"] = args ? args.allowedCombinations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthenticationStrengthPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AuthenticationStrengthPolicy = AuthenticationStrengthPolicy;
/** @internal */
AuthenticationStrengthPolicy.__pulumiType = 'azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy';
//# sourceMappingURL=authenticationStrengthPolicy.js.map