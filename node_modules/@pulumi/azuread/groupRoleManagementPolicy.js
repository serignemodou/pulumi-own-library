"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupRoleManagementPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manage a role policy for an Azure AD group.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.ReadWrite.AzureADGroup` Microsoft Graph API permissions.
 *
 * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.Group("example", {
 *     displayName: "group-name",
 *     securityEnabled: true,
 * });
 * const member = new azuread.User("member", {
 *     userPrincipalName: "jdoe@example.com",
 *     displayName: "J. Doe",
 *     mailNickname: "jdoe",
 *     password: "SecretP@sswd99!",
 * });
 * const exampleGroupRoleManagementPolicy = new azuread.GroupRoleManagementPolicy("example", {
 *     groupId: example.id,
 *     roleId: "member",
 *     activeAssignmentRules: {
 *         expireAfter: "P365D",
 *     },
 *     eligibleAssignmentRules: {
 *         expirationRequired: false,
 *     },
 *     notificationRules: {
 *         eligibleAssignments: {
 *             approverNotifications: {
 *                 notificationLevel: "Critical",
 *                 defaultRecipients: false,
 *                 additionalRecipients: [
 *                     "someone@example.com",
 *                     "someone.else@example.com",
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Because these policies are created automatically by Entra ID, they will auto-import on first use.
 */
class GroupRoleManagementPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GroupRoleManagementPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GroupRoleManagementPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GroupRoleManagementPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupRoleManagementPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activationRules"] = state ? state.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = state ? state.activeAssignmentRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["eligibleAssignmentRules"] = state ? state.eligibleAssignmentRules : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["notificationRules"] = state ? state.notificationRules : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["activationRules"] = args ? args.activationRules : undefined;
            resourceInputs["activeAssignmentRules"] = args ? args.activeAssignmentRules : undefined;
            resourceInputs["eligibleAssignmentRules"] = args ? args.eligibleAssignmentRules : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["notificationRules"] = args ? args.notificationRules : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupRoleManagementPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GroupRoleManagementPolicy = GroupRoleManagementPolicy;
/** @internal */
GroupRoleManagementPolicy.__pulumiType = 'azuread:index/groupRoleManagementPolicy:GroupRoleManagementPolicy';
//# sourceMappingURL=groupRoleManagementPolicy.js.map