"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientConfigOutput = exports.getClientConfig = exports.getApplicationTemplateOutput = exports.getApplicationTemplate = exports.getApplicationPublishedAppIdsOutput = exports.getApplicationPublishedAppIds = exports.getApplicationOutput = exports.getApplication = exports.getAdministrativeUnitOutput = exports.getAdministrativeUnit = exports.getAccessPackageCatalogRoleOutput = exports.getAccessPackageCatalogRole = exports.getAccessPackageCatalogOutput = exports.getAccessPackageCatalog = exports.getAccessPackageOutput = exports.getAccessPackage = exports.DirectoryRoleMember = exports.DirectoryRoleEligibilityScheduleRequest = exports.DirectoryRoleAssignment = exports.DirectoryRole = exports.CustomDirectoryRole = exports.ConditionalAccessPolicy = exports.ClaimsMappingPolicy = exports.AuthenticationStrengthPolicy = exports.ApplicationRegistration = exports.ApplicationRedirectUris = exports.ApplicationPreAuthorized = exports.ApplicationPermissionScope = exports.ApplicationPassword = exports.ApplicationOwner = exports.ApplicationOptionalClaims = exports.ApplicationKnownClients = exports.ApplicationIdentifierUri = exports.ApplicationFromTemplate = exports.ApplicationFederatedIdentityCredential = exports.ApplicationFallbackPublicClient = exports.ApplicationCertificate = exports.ApplicationAppRole = exports.ApplicationApiAccess = exports.Application = exports.AppRoleAssignment = exports.AdministrativeUnitRoleMember = exports.AdministrativeUnitMember = exports.AdministrativeUnit = exports.AccessPackageResourcePackageAssociation = exports.AccessPackageResourceCatalogAssociation = exports.AccessPackageCatalogRoleAssignment = exports.AccessPackageCatalog = exports.AccessPackageAssignmentPolicy = exports.AccessPackage = void 0;
exports.types = exports.config = exports.UserFlowAttribute = exports.User = exports.SynchronizationSecret = exports.SynchronizationJobProvisionOnDemand = exports.SynchronizationJob = exports.ServicePrincipalTokenSigningCertificate = exports.ServicePrincipalPassword = exports.ServicePrincipalDelegatedPermissionGrant = exports.ServicePrincipalClaimsMappingPolicyAssignment = exports.ServicePrincipalCertificate = exports.ServicePrincipal = exports.Provider = exports.PrivilegedAccessGroupEligibilitySchedule = exports.PrivilegedAccessGroupAssignmentSchedule = exports.NamedLocation = exports.Invitation = exports.GroupWithoutMembers = exports.GroupRoleManagementPolicy = exports.GroupMember = exports.Group = exports.getUsersOutput = exports.getUsers = exports.getUserOutput = exports.getUser = exports.getServicePrincipalsOutput = exports.getServicePrincipals = exports.getServicePrincipalOutput = exports.getServicePrincipal = exports.getNamedLocationOutput = exports.getNamedLocation = exports.getGroupsOutput = exports.getGroups = exports.getGroupRoleManagementPolicyOutput = exports.getGroupRoleManagementPolicy = exports.getGroupOutput = exports.getGroup = exports.getDomainsOutput = exports.getDomains = exports.getDirectoryRolesOutput = exports.getDirectoryRoles = exports.getDirectoryRoleTemplatesOutput = exports.getDirectoryRoleTemplates = exports.getDirectoryObjectOutput = exports.getDirectoryObject = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccessPackage = null;
utilities.lazyLoad(exports, ["AccessPackage"], () => require("./accessPackage"));
exports.AccessPackageAssignmentPolicy = null;
utilities.lazyLoad(exports, ["AccessPackageAssignmentPolicy"], () => require("./accessPackageAssignmentPolicy"));
exports.AccessPackageCatalog = null;
utilities.lazyLoad(exports, ["AccessPackageCatalog"], () => require("./accessPackageCatalog"));
exports.AccessPackageCatalogRoleAssignment = null;
utilities.lazyLoad(exports, ["AccessPackageCatalogRoleAssignment"], () => require("./accessPackageCatalogRoleAssignment"));
exports.AccessPackageResourceCatalogAssociation = null;
utilities.lazyLoad(exports, ["AccessPackageResourceCatalogAssociation"], () => require("./accessPackageResourceCatalogAssociation"));
exports.AccessPackageResourcePackageAssociation = null;
utilities.lazyLoad(exports, ["AccessPackageResourcePackageAssociation"], () => require("./accessPackageResourcePackageAssociation"));
exports.AdministrativeUnit = null;
utilities.lazyLoad(exports, ["AdministrativeUnit"], () => require("./administrativeUnit"));
exports.AdministrativeUnitMember = null;
utilities.lazyLoad(exports, ["AdministrativeUnitMember"], () => require("./administrativeUnitMember"));
exports.AdministrativeUnitRoleMember = null;
utilities.lazyLoad(exports, ["AdministrativeUnitRoleMember"], () => require("./administrativeUnitRoleMember"));
exports.AppRoleAssignment = null;
utilities.lazyLoad(exports, ["AppRoleAssignment"], () => require("./appRoleAssignment"));
exports.Application = null;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));
exports.ApplicationApiAccess = null;
utilities.lazyLoad(exports, ["ApplicationApiAccess"], () => require("./applicationApiAccess"));
exports.ApplicationAppRole = null;
utilities.lazyLoad(exports, ["ApplicationAppRole"], () => require("./applicationAppRole"));
exports.ApplicationCertificate = null;
utilities.lazyLoad(exports, ["ApplicationCertificate"], () => require("./applicationCertificate"));
exports.ApplicationFallbackPublicClient = null;
utilities.lazyLoad(exports, ["ApplicationFallbackPublicClient"], () => require("./applicationFallbackPublicClient"));
exports.ApplicationFederatedIdentityCredential = null;
utilities.lazyLoad(exports, ["ApplicationFederatedIdentityCredential"], () => require("./applicationFederatedIdentityCredential"));
exports.ApplicationFromTemplate = null;
utilities.lazyLoad(exports, ["ApplicationFromTemplate"], () => require("./applicationFromTemplate"));
exports.ApplicationIdentifierUri = null;
utilities.lazyLoad(exports, ["ApplicationIdentifierUri"], () => require("./applicationIdentifierUri"));
exports.ApplicationKnownClients = null;
utilities.lazyLoad(exports, ["ApplicationKnownClients"], () => require("./applicationKnownClients"));
exports.ApplicationOptionalClaims = null;
utilities.lazyLoad(exports, ["ApplicationOptionalClaims"], () => require("./applicationOptionalClaims"));
exports.ApplicationOwner = null;
utilities.lazyLoad(exports, ["ApplicationOwner"], () => require("./applicationOwner"));
exports.ApplicationPassword = null;
utilities.lazyLoad(exports, ["ApplicationPassword"], () => require("./applicationPassword"));
exports.ApplicationPermissionScope = null;
utilities.lazyLoad(exports, ["ApplicationPermissionScope"], () => require("./applicationPermissionScope"));
exports.ApplicationPreAuthorized = null;
utilities.lazyLoad(exports, ["ApplicationPreAuthorized"], () => require("./applicationPreAuthorized"));
exports.ApplicationRedirectUris = null;
utilities.lazyLoad(exports, ["ApplicationRedirectUris"], () => require("./applicationRedirectUris"));
exports.ApplicationRegistration = null;
utilities.lazyLoad(exports, ["ApplicationRegistration"], () => require("./applicationRegistration"));
exports.AuthenticationStrengthPolicy = null;
utilities.lazyLoad(exports, ["AuthenticationStrengthPolicy"], () => require("./authenticationStrengthPolicy"));
exports.ClaimsMappingPolicy = null;
utilities.lazyLoad(exports, ["ClaimsMappingPolicy"], () => require("./claimsMappingPolicy"));
exports.ConditionalAccessPolicy = null;
utilities.lazyLoad(exports, ["ConditionalAccessPolicy"], () => require("./conditionalAccessPolicy"));
exports.CustomDirectoryRole = null;
utilities.lazyLoad(exports, ["CustomDirectoryRole"], () => require("./customDirectoryRole"));
exports.DirectoryRole = null;
utilities.lazyLoad(exports, ["DirectoryRole"], () => require("./directoryRole"));
exports.DirectoryRoleAssignment = null;
utilities.lazyLoad(exports, ["DirectoryRoleAssignment"], () => require("./directoryRoleAssignment"));
exports.DirectoryRoleEligibilityScheduleRequest = null;
utilities.lazyLoad(exports, ["DirectoryRoleEligibilityScheduleRequest"], () => require("./directoryRoleEligibilityScheduleRequest"));
exports.DirectoryRoleMember = null;
utilities.lazyLoad(exports, ["DirectoryRoleMember"], () => require("./directoryRoleMember"));
exports.getAccessPackage = null;
exports.getAccessPackageOutput = null;
utilities.lazyLoad(exports, ["getAccessPackage", "getAccessPackageOutput"], () => require("./getAccessPackage"));
exports.getAccessPackageCatalog = null;
exports.getAccessPackageCatalogOutput = null;
utilities.lazyLoad(exports, ["getAccessPackageCatalog", "getAccessPackageCatalogOutput"], () => require("./getAccessPackageCatalog"));
exports.getAccessPackageCatalogRole = null;
exports.getAccessPackageCatalogRoleOutput = null;
utilities.lazyLoad(exports, ["getAccessPackageCatalogRole", "getAccessPackageCatalogRoleOutput"], () => require("./getAccessPackageCatalogRole"));
exports.getAdministrativeUnit = null;
exports.getAdministrativeUnitOutput = null;
utilities.lazyLoad(exports, ["getAdministrativeUnit", "getAdministrativeUnitOutput"], () => require("./getAdministrativeUnit"));
exports.getApplication = null;
exports.getApplicationOutput = null;
utilities.lazyLoad(exports, ["getApplication", "getApplicationOutput"], () => require("./getApplication"));
exports.getApplicationPublishedAppIds = null;
exports.getApplicationPublishedAppIdsOutput = null;
utilities.lazyLoad(exports, ["getApplicationPublishedAppIds", "getApplicationPublishedAppIdsOutput"], () => require("./getApplicationPublishedAppIds"));
exports.getApplicationTemplate = null;
exports.getApplicationTemplateOutput = null;
utilities.lazyLoad(exports, ["getApplicationTemplate", "getApplicationTemplateOutput"], () => require("./getApplicationTemplate"));
exports.getClientConfig = null;
exports.getClientConfigOutput = null;
utilities.lazyLoad(exports, ["getClientConfig", "getClientConfigOutput"], () => require("./getClientConfig"));
exports.getDirectoryObject = null;
exports.getDirectoryObjectOutput = null;
utilities.lazyLoad(exports, ["getDirectoryObject", "getDirectoryObjectOutput"], () => require("./getDirectoryObject"));
exports.getDirectoryRoleTemplates = null;
exports.getDirectoryRoleTemplatesOutput = null;
utilities.lazyLoad(exports, ["getDirectoryRoleTemplates", "getDirectoryRoleTemplatesOutput"], () => require("./getDirectoryRoleTemplates"));
exports.getDirectoryRoles = null;
exports.getDirectoryRolesOutput = null;
utilities.lazyLoad(exports, ["getDirectoryRoles", "getDirectoryRolesOutput"], () => require("./getDirectoryRoles"));
exports.getDomains = null;
exports.getDomainsOutput = null;
utilities.lazyLoad(exports, ["getDomains", "getDomainsOutput"], () => require("./getDomains"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getGroupRoleManagementPolicy = null;
exports.getGroupRoleManagementPolicyOutput = null;
utilities.lazyLoad(exports, ["getGroupRoleManagementPolicy", "getGroupRoleManagementPolicyOutput"], () => require("./getGroupRoleManagementPolicy"));
exports.getGroups = null;
exports.getGroupsOutput = null;
utilities.lazyLoad(exports, ["getGroups", "getGroupsOutput"], () => require("./getGroups"));
exports.getNamedLocation = null;
exports.getNamedLocationOutput = null;
utilities.lazyLoad(exports, ["getNamedLocation", "getNamedLocationOutput"], () => require("./getNamedLocation"));
exports.getServicePrincipal = null;
exports.getServicePrincipalOutput = null;
utilities.lazyLoad(exports, ["getServicePrincipal", "getServicePrincipalOutput"], () => require("./getServicePrincipal"));
exports.getServicePrincipals = null;
exports.getServicePrincipalsOutput = null;
utilities.lazyLoad(exports, ["getServicePrincipals", "getServicePrincipalsOutput"], () => require("./getServicePrincipals"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getUsers = null;
exports.getUsersOutput = null;
utilities.lazyLoad(exports, ["getUsers", "getUsersOutput"], () => require("./getUsers"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.GroupMember = null;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));
exports.GroupRoleManagementPolicy = null;
utilities.lazyLoad(exports, ["GroupRoleManagementPolicy"], () => require("./groupRoleManagementPolicy"));
exports.GroupWithoutMembers = null;
utilities.lazyLoad(exports, ["GroupWithoutMembers"], () => require("./groupWithoutMembers"));
exports.Invitation = null;
utilities.lazyLoad(exports, ["Invitation"], () => require("./invitation"));
exports.NamedLocation = null;
utilities.lazyLoad(exports, ["NamedLocation"], () => require("./namedLocation"));
exports.PrivilegedAccessGroupAssignmentSchedule = null;
utilities.lazyLoad(exports, ["PrivilegedAccessGroupAssignmentSchedule"], () => require("./privilegedAccessGroupAssignmentSchedule"));
exports.PrivilegedAccessGroupEligibilitySchedule = null;
utilities.lazyLoad(exports, ["PrivilegedAccessGroupEligibilitySchedule"], () => require("./privilegedAccessGroupEligibilitySchedule"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.ServicePrincipal = null;
utilities.lazyLoad(exports, ["ServicePrincipal"], () => require("./servicePrincipal"));
exports.ServicePrincipalCertificate = null;
utilities.lazyLoad(exports, ["ServicePrincipalCertificate"], () => require("./servicePrincipalCertificate"));
exports.ServicePrincipalClaimsMappingPolicyAssignment = null;
utilities.lazyLoad(exports, ["ServicePrincipalClaimsMappingPolicyAssignment"], () => require("./servicePrincipalClaimsMappingPolicyAssignment"));
exports.ServicePrincipalDelegatedPermissionGrant = null;
utilities.lazyLoad(exports, ["ServicePrincipalDelegatedPermissionGrant"], () => require("./servicePrincipalDelegatedPermissionGrant"));
exports.ServicePrincipalPassword = null;
utilities.lazyLoad(exports, ["ServicePrincipalPassword"], () => require("./servicePrincipalPassword"));
exports.ServicePrincipalTokenSigningCertificate = null;
utilities.lazyLoad(exports, ["ServicePrincipalTokenSigningCertificate"], () => require("./servicePrincipalTokenSigningCertificate"));
exports.SynchronizationJob = null;
utilities.lazyLoad(exports, ["SynchronizationJob"], () => require("./synchronizationJob"));
exports.SynchronizationJobProvisionOnDemand = null;
utilities.lazyLoad(exports, ["SynchronizationJobProvisionOnDemand"], () => require("./synchronizationJobProvisionOnDemand"));
exports.SynchronizationSecret = null;
utilities.lazyLoad(exports, ["SynchronizationSecret"], () => require("./synchronizationSecret"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.UserFlowAttribute = null;
utilities.lazyLoad(exports, ["UserFlowAttribute"], () => require("./userFlowAttribute"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azuread:index/accessPackage:AccessPackage":
                return new exports.AccessPackage(name, undefined, { urn });
            case "azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy":
                return new exports.AccessPackageAssignmentPolicy(name, undefined, { urn });
            case "azuread:index/accessPackageCatalog:AccessPackageCatalog":
                return new exports.AccessPackageCatalog(name, undefined, { urn });
            case "azuread:index/accessPackageCatalogRoleAssignment:AccessPackageCatalogRoleAssignment":
                return new exports.AccessPackageCatalogRoleAssignment(name, undefined, { urn });
            case "azuread:index/accessPackageResourceCatalogAssociation:AccessPackageResourceCatalogAssociation":
                return new exports.AccessPackageResourceCatalogAssociation(name, undefined, { urn });
            case "azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation":
                return new exports.AccessPackageResourcePackageAssociation(name, undefined, { urn });
            case "azuread:index/administrativeUnit:AdministrativeUnit":
                return new exports.AdministrativeUnit(name, undefined, { urn });
            case "azuread:index/administrativeUnitMember:AdministrativeUnitMember":
                return new exports.AdministrativeUnitMember(name, undefined, { urn });
            case "azuread:index/administrativeUnitRoleMember:AdministrativeUnitRoleMember":
                return new exports.AdministrativeUnitRoleMember(name, undefined, { urn });
            case "azuread:index/appRoleAssignment:AppRoleAssignment":
                return new exports.AppRoleAssignment(name, undefined, { urn });
            case "azuread:index/application:Application":
                return new exports.Application(name, undefined, { urn });
            case "azuread:index/applicationApiAccess:ApplicationApiAccess":
                return new exports.ApplicationApiAccess(name, undefined, { urn });
            case "azuread:index/applicationAppRole:ApplicationAppRole":
                return new exports.ApplicationAppRole(name, undefined, { urn });
            case "azuread:index/applicationCertificate:ApplicationCertificate":
                return new exports.ApplicationCertificate(name, undefined, { urn });
            case "azuread:index/applicationFallbackPublicClient:ApplicationFallbackPublicClient":
                return new exports.ApplicationFallbackPublicClient(name, undefined, { urn });
            case "azuread:index/applicationFederatedIdentityCredential:ApplicationFederatedIdentityCredential":
                return new exports.ApplicationFederatedIdentityCredential(name, undefined, { urn });
            case "azuread:index/applicationFromTemplate:ApplicationFromTemplate":
                return new exports.ApplicationFromTemplate(name, undefined, { urn });
            case "azuread:index/applicationIdentifierUri:ApplicationIdentifierUri":
                return new exports.ApplicationIdentifierUri(name, undefined, { urn });
            case "azuread:index/applicationKnownClients:ApplicationKnownClients":
                return new exports.ApplicationKnownClients(name, undefined, { urn });
            case "azuread:index/applicationOptionalClaims:ApplicationOptionalClaims":
                return new exports.ApplicationOptionalClaims(name, undefined, { urn });
            case "azuread:index/applicationOwner:ApplicationOwner":
                return new exports.ApplicationOwner(name, undefined, { urn });
            case "azuread:index/applicationPassword:ApplicationPassword":
                return new exports.ApplicationPassword(name, undefined, { urn });
            case "azuread:index/applicationPermissionScope:ApplicationPermissionScope":
                return new exports.ApplicationPermissionScope(name, undefined, { urn });
            case "azuread:index/applicationPreAuthorized:ApplicationPreAuthorized":
                return new exports.ApplicationPreAuthorized(name, undefined, { urn });
            case "azuread:index/applicationRedirectUris:ApplicationRedirectUris":
                return new exports.ApplicationRedirectUris(name, undefined, { urn });
            case "azuread:index/applicationRegistration:ApplicationRegistration":
                return new exports.ApplicationRegistration(name, undefined, { urn });
            case "azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy":
                return new exports.AuthenticationStrengthPolicy(name, undefined, { urn });
            case "azuread:index/claimsMappingPolicy:ClaimsMappingPolicy":
                return new exports.ClaimsMappingPolicy(name, undefined, { urn });
            case "azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy":
                return new exports.ConditionalAccessPolicy(name, undefined, { urn });
            case "azuread:index/customDirectoryRole:CustomDirectoryRole":
                return new exports.CustomDirectoryRole(name, undefined, { urn });
            case "azuread:index/directoryRole:DirectoryRole":
                return new exports.DirectoryRole(name, undefined, { urn });
            case "azuread:index/directoryRoleAssignment:DirectoryRoleAssignment":
                return new exports.DirectoryRoleAssignment(name, undefined, { urn });
            case "azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest":
                return new exports.DirectoryRoleEligibilityScheduleRequest(name, undefined, { urn });
            case "azuread:index/directoryRoleMember:DirectoryRoleMember":
                return new exports.DirectoryRoleMember(name, undefined, { urn });
            case "azuread:index/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "azuread:index/groupMember:GroupMember":
                return new exports.GroupMember(name, undefined, { urn });
            case "azuread:index/groupRoleManagementPolicy:GroupRoleManagementPolicy":
                return new exports.GroupRoleManagementPolicy(name, undefined, { urn });
            case "azuread:index/groupWithoutMembers:GroupWithoutMembers":
                return new exports.GroupWithoutMembers(name, undefined, { urn });
            case "azuread:index/invitation:Invitation":
                return new exports.Invitation(name, undefined, { urn });
            case "azuread:index/namedLocation:NamedLocation":
                return new exports.NamedLocation(name, undefined, { urn });
            case "azuread:index/privilegedAccessGroupAssignmentSchedule:PrivilegedAccessGroupAssignmentSchedule":
                return new exports.PrivilegedAccessGroupAssignmentSchedule(name, undefined, { urn });
            case "azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule":
                return new exports.PrivilegedAccessGroupEligibilitySchedule(name, undefined, { urn });
            case "azuread:index/servicePrincipal:ServicePrincipal":
                return new exports.ServicePrincipal(name, undefined, { urn });
            case "azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate":
                return new exports.ServicePrincipalCertificate(name, undefined, { urn });
            case "azuread:index/servicePrincipalClaimsMappingPolicyAssignment:ServicePrincipalClaimsMappingPolicyAssignment":
                return new exports.ServicePrincipalClaimsMappingPolicyAssignment(name, undefined, { urn });
            case "azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant":
                return new exports.ServicePrincipalDelegatedPermissionGrant(name, undefined, { urn });
            case "azuread:index/servicePrincipalPassword:ServicePrincipalPassword":
                return new exports.ServicePrincipalPassword(name, undefined, { urn });
            case "azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate":
                return new exports.ServicePrincipalTokenSigningCertificate(name, undefined, { urn });
            case "azuread:index/synchronizationJob:SynchronizationJob":
                return new exports.SynchronizationJob(name, undefined, { urn });
            case "azuread:index/synchronizationJobProvisionOnDemand:SynchronizationJobProvisionOnDemand":
                return new exports.SynchronizationJobProvisionOnDemand(name, undefined, { urn });
            case "azuread:index/synchronizationSecret:SynchronizationSecret":
                return new exports.SynchronizationSecret(name, undefined, { urn });
            case "azuread:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "azuread:index/userFlowAttribute:UserFlowAttribute":
                return new exports.UserFlowAttribute(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azuread", "index/accessPackage", _module);
pulumi.runtime.registerResourceModule("azuread", "index/accessPackageAssignmentPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/accessPackageCatalog", _module);
pulumi.runtime.registerResourceModule("azuread", "index/accessPackageCatalogRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azuread", "index/accessPackageResourceCatalogAssociation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/accessPackageResourcePackageAssociation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/administrativeUnit", _module);
pulumi.runtime.registerResourceModule("azuread", "index/administrativeUnitMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/administrativeUnitRoleMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/appRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azuread", "index/application", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationApiAccess", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationAppRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationFallbackPublicClient", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationFederatedIdentityCredential", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationFromTemplate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationIdentifierUri", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationKnownClients", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationOptionalClaims", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationOwner", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPermissionScope", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPreAuthorized", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationRedirectUris", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationRegistration", _module);
pulumi.runtime.registerResourceModule("azuread", "index/authenticationStrengthPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/claimsMappingPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/conditionalAccessPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/customDirectoryRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRoleEligibilityScheduleRequest", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRoleMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/group", _module);
pulumi.runtime.registerResourceModule("azuread", "index/groupMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/groupRoleManagementPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/groupWithoutMembers", _module);
pulumi.runtime.registerResourceModule("azuread", "index/invitation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/namedLocation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/privilegedAccessGroupAssignmentSchedule", _module);
pulumi.runtime.registerResourceModule("azuread", "index/privilegedAccessGroupEligibilitySchedule", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipal", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalClaimsMappingPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalDelegatedPermissionGrant", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalTokenSigningCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/synchronizationJob", _module);
pulumi.runtime.registerResourceModule("azuread", "index/synchronizationJobProvisionOnDemand", _module);
pulumi.runtime.registerResourceModule("azuread", "index/synchronizationSecret", _module);
pulumi.runtime.registerResourceModule("azuread", "index/user", _module);
pulumi.runtime.registerResourceModule("azuread", "index/userFlowAttribute", _module);
pulumi.runtime.registerResourcePackage("azuread", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:azuread") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map