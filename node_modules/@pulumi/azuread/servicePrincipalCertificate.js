"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicePrincipalCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * *Using a PEM certificate*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 * import * as std from "@pulumi/std";
 *
 * const example = new azuread.Application("example", {displayName: "example"});
 * const exampleServicePrincipal = new azuread.ServicePrincipal("example", {clientId: example.clientId});
 * const exampleServicePrincipalCertificate = new azuread.ServicePrincipalCertificate("example", {
 *     servicePrincipalId: exampleServicePrincipal.id,
 *     type: "AsymmetricX509Cert",
 *     value: std.file({
 *         input: "cert.pem",
 *     }).then(invoke => invoke.result),
 *     endDate: "2021-05-01T01:02:03Z",
 * });
 * ```
 *
 * *Using a DER certificate*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 * import * as std from "@pulumi/std";
 *
 * const example = new azuread.Application("example", {displayName: "example"});
 * const exampleServicePrincipal = new azuread.ServicePrincipal("example", {clientId: example.clientId});
 * const exampleServicePrincipalCertificate = new azuread.ServicePrincipalCertificate("example", {
 *     servicePrincipalId: exampleServicePrincipal.id,
 *     type: "AsymmetricX509Cert",
 *     encoding: "base64",
 *     value: std.file({
 *         input: "cert.der",
 *     }).then(invoke => std.base64encode({
 *         input: invoke.result,
 *     })).then(invoke => invoke.result),
 *     endDate: "2021-05-01T01:02:03Z",
 * });
 * ```
 *
 * ## Import
 *
 * Certificates can be imported using the object ID of the associated service principal and the key ID of the certificate credential, e.g.
 *
 * ```sh
 * $ pulumi import azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate example 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111
 * ```
 *
 * -> This ID format is unique to Terraform and is composed of the service principal's object ID, the string "certificate" and the certificate's key ID in the format `{ServicePrincipalObjectId}/certificate/{CertificateKeyId}`.
 */
class ServicePrincipalCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ServicePrincipalCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServicePrincipalCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServicePrincipalCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePrincipalCertificate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["encoding"] = state ? state.encoding : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["endDateRelative"] = state ? state.endDateRelative : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.servicePrincipalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipalId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["encoding"] = args ? args.encoding : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["endDateRelative"] = args ? args.endDateRelative : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = (args === null || args === void 0 ? void 0 : args.value) ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServicePrincipalCertificate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServicePrincipalCertificate = ServicePrincipalCertificate;
/** @internal */
ServicePrincipalCertificate.__pulumiType = 'azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate';
//# sourceMappingURL=servicePrincipalCertificate.js.map